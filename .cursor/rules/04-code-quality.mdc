---
description: 
globs: 
alwaysApply: false
---
# Code Quality Standards

## General Principles
- Write self-documenting code with clear variable and function names
- Follow the DRY (Don't Repeat Yourself) principle
- Keep functions small and focused on a single responsibility
- Limit function parameters to improve readability and testability
- Use meaningful variable names that describe their purpose
- Avoid deep nesting of control structures
- Prefer composition over inheritance

## Security Practices
- Never hardcode credentials or sensitive information in code
- Use parameterized queries for all database operations
- Validate all user inputs before processing
- Implement proper authentication and authorization checks
- Use HTTPS for all network communications
- Follow the principle of least privilege
- Sanitize all outputs to prevent XSS and injection attacks

## Performance Considerations
- Optimize database queries to minimize round trips
- Use appropriate data structures for the task
- Consider time and space complexity for all algorithms
- Implement caching strategies where appropriate
- Avoid blocking operations in request handling paths
- Use asynchronous operations for I/O bound tasks
- Profile code to identify bottlenecks before optimizing

## Error Handling
- Use structured error handling (try/catch blocks)
- Create specific error types for different failure scenarios
- Log errors with appropriate context information
- Provide clear error messages to users
- Handle all edge cases and unexpected inputs
- Gracefully degrade functionality when dependencies fail
- Always clean up resources in finally blocks

## Testing Requirements
- Write unit tests for all business logic
- Include integration tests for component interactions
- Implement end-to-end tests for critical user flows
- Use mocks and stubs to isolate test dependencies
- Include edge cases and error scenarios in tests
- Maintain high test coverage for critical paths
- Automate regression testing 