---
description: 
globs: 
alwaysApply: false
---
# Python Specific Guidelines

## Architecture Guidelines

### Project Structure
- Follow standard Python project structure with src/, tests/, and docs/ directories
- Organize modules according to TI architecture pattern
- Separate concerns: data, logic, and presentation layers
- Use proper dependency management via requirements.txt and virtual environments

### Design Patterns
- Implement the observer pattern for event-driven components
- Use dependency injection for modular and testable code
- Apply the repository pattern for data access operations
- Implement factory pattern for object creation when appropriate
- Use the context manager pattern for resource management (especially file operations)

## Coding Conventions

### Naming Conventions
- Use snake_case for variables and function/method names
- Use PascalCase for class names
- Use UPPER_SNAKE_CASE for constants
- Prefix private members with single underscore (_)
- Follow PEP 8 style guidelines for all Python code

### Documentation
- Document all public functions and classes using Google-style docstrings
- Include examples in documentation for complex operations
- Document side effects and return values
- Use consistent tense and voice in comments
- Keep inline comments focused on "why" not "what"

## Best Practices

### Error Handling
- Use try/except blocks with specific exceptions (avoid bare except)
- Avoid silent failures
- Log all errors with appropriate severity
- Include useful debugging information in error messages
- Centralize error handling where possible

### Performance Optimization
- Use asynchronous operations for I/O-bound operations 
- Implement caching for expensive operations
- Minimize object allocation in performance-critical code
- Use appropriate data structures for operations
- Profile code to identify bottlenecks

### Testing
- Write unit tests for all public functions using pytest
- Use unittest.mock for mocking external dependencies
- Test error conditions explicitly
- Achieve at least 90% code coverage
- Implement integration tests to verify component interactions

## Security Considerations

### Input Validation
- Validate all user inputs
- Use parameterized queries for database operations
- Sanitize data before displaying to users
- Implement appropriate access controls
- Apply principle of least privilege

### Data Protection
- Use environment variables for sensitive configuration
- Never store credentials or secrets in code
- Apply encryption for sensitive data at rest
- Use secure communication protocols
- Regularly update dependencies to address vulnerabilities

## Technology-Specific Libraries

### Flask Application
- Use Flask 2.0.0+ for web applications
- Structure Flask applications with Application Factory pattern
- Implement proper error handling middleware
- Use Flask-specific security best practices (CORS, CSP)
- Implement request validation using schemas

### Flake8 Integration
- Configure Flake8 with project-specific rule sets
- Enforce consistent line length (88-100 characters)
- Use .flake8 configuration file for project settings
- Integrate with pre-commit hooks for automatic checks
- Document any intentionally ignored rules with inline comments

### MCP Protocol Implementation
- Follow JSON-RPC 2.0 specification for all endpoints
- Implement proper error codes and messages
- Create comprehensive validation for all requests
- Document all methods and parameters
- Implement logging for all MCP operations

### Recommended Libraries
- Flask: For web service development
- Flake8: For code quality analysis
- Black: For code formatting
- Bandit: For security vulnerability analysis
- pytest: For testing
- requests: For HTTP client operations
- pydantic: For data validation and settings management

### Library Usage Guidelines
- Prefer established libraries over custom implementations
- Review licenses before adding new dependencies
- Maintain consistent versions across the project
- Document reasons for library choices
- Include fallback strategies for critical library functionality

## Tailored Intelligence Integration

### TI Component Interaction
- Follow established integration patterns with other TI components
- Use standardized request/response formats for inter-component communication
- Document all integration points clearly
- Implement graceful degradation when dependencies are unavailable
- Include appropriate metrics and monitoring at integration boundaries

### Deployment Considerations
- Package applications following Python best practices
- Create slim container images
- Support both development and production environments
- Include health check endpoints
- Externalize all configuration

## Cursor AI Usage Tips

### Code Generation
- Ask for Python-specific implementations
- Request examples that follow TI architecture patterns
- Use "Generate test for this function" to create comprehensive tests
- Ask for documentation in Google docstring format

### Code Analysis
- Use "Review this code for Python best practices" for feedback
- Request performance improvement suggestions
- Ask for security vulnerability analysis
- Get help with complex debugging scenarios

### Flake8 Analysis Through MCP
- Use "Run Flake8 analysis on this file" to check code quality
- Ask for "Explain the Flake8 errors in this code"
- Request "How can I fix these PEP 8 issues?"
- Use "Check if this code follows Python style guidelines"

### Learning Resources
- [Python Official Documentation](mdc:https:/docs.python.org)
- [Flask Documentation](mdc:https:/flask.palletsprojects.com)
- [Flake8 Documentation](mdc:https:/flake8.pycqa.org)
- [JSON-RPC 2.0 Specification](mdc:https:/www.jsonrpc.org/specification) 