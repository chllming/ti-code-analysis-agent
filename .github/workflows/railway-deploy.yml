name: Deploy to Railway

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Security scan with bandit
        run: |
          bandit -r src/ -x tests/ -ll

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [lint, security_scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          python -m pytest

      - name: Generate test coverage report
        run: |
          pip install pytest-cov
          pytest --cov=src --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 7

  deploy:
    name: Deploy
    needs: test  # Only deploy if tests pass
    runs-on: ubuntu-latest
    environment: production  # Using GitHub environments for added protection
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Verify Dockerfile exists
        run: |
          if [ ! -f "Dockerfile.railway" ]; then
            echo "Dockerfile.railway not found!"
            exit 1
          fi
          echo "Dockerfile.railway found, proceeding with deployment."

      - name: Deploy to Railway
        id: deploy
        run: |
          # Log in with token
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          
          # Link to project (will use RAILWAY_PROJECT_ID if provided)
          if [ -n "${{ secrets.RAILWAY_PROJECT_ID }}" ]; then
            railway link ${{ secrets.RAILWAY_PROJECT_ID }}
          else
            railway link
          fi
          
          # Deploy with detached mode to avoid blocking CI
          railway up --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment and verify health
        id: health_check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          
          # Check the health endpoint with the provided URL
          if [ -n "${{ secrets.RAILWAY_APP_URL }}" ]; then
            echo "Checking health at: ${{ secrets.RAILWAY_APP_URL }}/health"
            
            # Wait for up to 2 minutes
            ATTEMPTS=0
            MAX_ATTEMPTS=12
            
            until $(curl --output /dev/null --silent --fail ${{ secrets.RAILWAY_APP_URL }}/health) || [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; do
              ATTEMPTS=$((ATTEMPTS+1))
              echo "Health check attempt $ATTEMPTS of $MAX_ATTEMPTS..."
              sleep 10
            done
            
            if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
              echo "Health check failed after $MAX_ATTEMPTS attempts!"
              exit 1
            fi
            
            echo "Deployment successful and health check passed!"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "RAILWAY_APP_URL not provided. Skipping health check."
            echo "Please set the RAILWAY_APP_URL secret for health verification."
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi
          
      - name: Notify deployment status
        if: always()
        run: |
          echo "Deployment Status: ${{ job.status }}"
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment completed successfully!"
            echo "Application URL: ${{ secrets.RAILWAY_APP_URL }}"
          else
            echo "❌ Deployment failed. Check logs for details."
          fi

      # Optional Slack notification step - only runs if SLACK_WEBHOOK_URL is configured
      - name: Check for Slack webhook
        id: check_slack
        if: always()
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "has_webhook=true" >> $GITHUB_OUTPUT
          else
            echo "has_webhook=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Send Slack notification
        if: always() && steps.check_slack.outputs.has_webhook == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 